{"name":"UI-Router","tagline":"UI-Router for Nested Routing by the AngularUI Team!","body":"# AngularUI Router &nbsp;[![Build Status](https://travis-ci.org/angular-ui/ui-router.png?branch=master)](https://travis-ci.org/angular-ui/ui-router)\r\n\r\n#### The de-facto solution to flexible routing with nested views\r\n---\r\n**[Download 0.2.8](http://angular-ui.github.io/ui-router/release/angular-ui-router.js)** (or **[Minified](http://angular-ui.github.io/ui-router/release/angular-ui-router.min.js)**) **|**\r\n**[Learn](#resources) |**\r\n**[Discuss](https://groups.google.com/forum/#!categories/angular-ui/router) |**\r\n**[Get Help](http://stackoverflow.com/questions/ask?tags=angularjs,angular-ui-router) |**\r\n**[Report an Issue](#report-an-issue) |**\r\n**[Contribute](#contribute)**\r\n\r\n---\r\n\r\nAngularUI Router is a routing framework for [AngularJS](http://angularjs.org), which allows you to organize the\r\nparts of your interface into a [*state machine*](https://en.wikipedia.org/wiki/Finite-state_machine). Unlike the\r\n[`$route` service](http://docs.angularjs.org/api/ngRoute.$route) in Angular core, which is organized around URL\r\nroutes, UI-Router is organized around [*states*](https://github.com/angular-ui/ui-router/blob/master/sample/states.js#L28-L269),\r\nwhich may optionally have routes, as well as other behavior, attached.\r\n\r\nStates are bound to *named*, *nested* and *parallel views*, allowing you to powerfully manage your application's interface.\r\n\r\n-\r\n**Warning:** *UI-Router is pre-beta and under active development. As such, while this library is well-tested, the API is subject\r\nto change. Using it in a project that requires guaranteed stability is not recommended.*\r\n\r\n\r\n## Get Started\r\n\r\n**(1)** Get UI-Router in one of 4 ways:\r\n - clone & [build](#developing) this repository\r\n - [download the release](http://angular-ui.github.io/ui-router/release/angular-ui-router.js) (or [minified](http://angular-ui.github.io/ui-router/release/angular-ui-router.min.js))\r\n - via **[Bower](http://bower.io/)**: by running `$ bower install angular-ui-router` from your console\r\n - or via **[Component](https://github.com/component/component)**: by running `$ component install angular-ui/ui-router` from your console\r\n\r\n**(2)** Include `angular-ui-router.js` (or `angular-ui-router.min.js`) in your `index.html`, after including Angular itself (For Component users: ignore this step)\r\n\r\n**(3)** Add `'ui.router'` to your main module's list of dependencies (For Component users: replace `'ui.router'` with `require('angular-ui-router')`)\r\n\r\nWhen you're done, your setup should look similar to the following:\r\n\r\n>\r\n```html\r\n<!doctype html>\r\n<html ng-app=\"myApp\">\r\n<head>\r\n    <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js\"></script>\r\n    <script src=\"js/angular-ui-router.min.js\"></script>\r\n    <script>\r\n        var myApp = angular.module('myApp', ['ui.router']);\r\n        // For Component users, it should look like this:\r\n        // var myApp = angular.module('myApp', [require('angular-ui-router')]);\r\n    </script>\r\n    ...\r\n</head>\r\n<body>\r\n    ...\r\n</body>\r\n</html>\r\n```\r\n\r\n### Nested States & Views\r\n\r\nThe majority of UI-Router's power is in its ability to nest states & views.\r\n\r\n**(1)** First, follow the [setup](#get-started) instructions detailed above.\r\n\r\n**(2)** Then, add a [`ui-view` directive](https://github.com/angular-ui/ui-router/wiki/Quick-Reference#ui-view) to the `<body />` of your app.\r\n\r\n>\r\n```html\r\n<!-- index.html -->\r\n<body>\r\n    <div ui-view></div>\r\n    <!-- We'll also add some navigation: -->\r\n    <a ui-sref=\"state1\">State 1</a>\r\n    <a ui-sref=\"state2\">State 2</a>\r\n</body>\r\n```\r\n\r\n**(3)** You'll notice we also added some links with [`ui-sref` directives](https://github.com/angular-ui/ui-router/wiki/Quick-Reference#ui-sref). In addition to managing state transitions, this directive auto-generates the `href` attribute of the `<a />` element it's attached to, if the corresponding state has a URL. Next we'll add some templates. These will plug into the `ui-view` within `index.html`. Notice that they have their own `ui-view` as well! That is the key to nesting states and views.\r\n\r\n>\r\n```html\r\n<!-- partials/state1.html -->\r\n<h1>State 1</h1>\r\n<hr/>\r\n<a ui-sref=\"state1.list\">Show List</a>\r\n<div ui-view></div>\r\n```\r\n```html\r\n<!-- partials/state2.html -->\r\n<h1>State 2</h1>\r\n<hr/>\r\n<a ui-sref=\"state2.list\">Show List</a>\r\n<div ui-view></div>\r\n```\r\n\r\n**(4)** Next, we'll add some child templates. *These* will get plugged into the `ui-view` of their parent state templates.\r\n\r\n>\r\n```html\r\n<!-- partials/state1.list.html -->\r\n<h3>List of State 1 Items</h3>\r\n<ul>\r\n  <li ng-repeat=\"item in items\">{{ item }}</li>\r\n</ul>\r\n```\r\n\r\n>\r\n```html\r\n<!-- partials/state2.list.html -->\r\n<h3>List of State 2 Things</h3>\r\n<ul>\r\n  <li ng-repeat=\"thing in things\">{{ thing }}</li>\r\n</ul>\r\n```\r\n\r\n**(5)** Finally, we'll wire it all up with `$stateProvider`. Set up your states in the module config, as in the following:\r\n\r\n\r\n>\r\n```javascript\r\nmyApp.config(function($stateProvider, $urlRouterProvider) {\r\n  //\r\n  // For any unmatched url, redirect to /state1\r\n  $urlRouterProvider.otherwise(\"/state1\");\r\n  //\r\n  // Now set up the states\r\n  $stateProvider\r\n    .state('state1', {\r\n      url: \"/state1\",\r\n      templateUrl: \"partials/state1.html\"\r\n    })\r\n    .state('state1.list', {\r\n      url: \"/list\",\r\n      templateUrl: \"partials/state1.list.html\",\r\n      controller: function($scope) {\r\n        $scope.items = [\"A\", \"List\", \"Of\", \"Items\"];\r\n      }\r\n    })\r\n    .state('state2', {\r\n      url: \"/state2\",\r\n      templateUrl: \"partials/state2.html\"\r\n    })\r\n    .state('state2.list', {\r\n      url: \"/list\",\r\n        templateUrl: \"partials/state2.list.html\",\r\n        controller: function($scope) {\r\n          $scope.things = [\"A\", \"Set\", \"Of\", \"Things\"];\r\n        }\r\n      })\r\n    });\r\n```\r\n\r\n**(6)** See this quick start example in action.\r\n>**[Go to Quick Start Plunker for Nested States & Views](http://plnkr.co/edit/u18KQc?p=preview)**\r\n\r\n**(7)** This only scratches the surface\r\n>**[Dive Deeper!](https://github.com/angular-ui/ui-router/wiki)**\r\n\r\n\r\n### Multiple & Named Views\r\n\r\nAnother great feature is the ability to have multiple `ui-view`s view per template.\r\n\r\n**Pro Tip:** *While multiple parallel views are a powerful feature, you'll often be able to manage your\r\ninterfaces more effectively by nesting your views, and pairing those views with nested states.*\r\n\r\n**(1)** Follow the [setup](#get-started) instructions detailed above.\r\n\r\n**(2)** Add one or more `ui-view` to your app, give them names.\r\n>\r\n```html\r\n<!-- index.html -->\r\n<body>\r\n    <div ui-view=\"viewA\"></div>\r\n    <div ui-view=\"viewB\"></div>\r\n    <!-- Also a way to navigate -->\r\n    <a ui-sref=\"route1\">Route 1</a>\r\n    <a ui-sref=\"route2\">Route 2</a>\r\n</body>\r\n```\r\n\r\n**(3)** Set up your states in the module config:\r\n>\r\n```javascript\r\nmyApp.config(function($stateProvider) {\r\n  $stateProvider\r\n    .state('index', {\r\n      url: \"\",\r\n      views: {\r\n        \"viewA\": { template: \"index.viewA\" },\r\n        \"viewB\": { template: \"index.viewB\" }\r\n      }\r\n    })\r\n    .state('route1', {\r\n      url: \"/route1\",\r\n      views: {\r\n        \"viewA\": { template: \"route1.viewA\" },\r\n        \"viewB\": { template: \"route1.viewB\" }\r\n      }\r\n    })\r\n    .state('route2', {\r\n      url: \"/route2\",\r\n      views: {\r\n        \"viewA\": { template: \"route2.viewA\" },\r\n        \"viewB\": { template: \"route2.viewB\" }\r\n      }\r\n    })\r\n});\r\n```\r\n\r\n**(4)** See this quick start example in action.\r\n>**[Go to Quick Start Plunker for Multiple & Named Views](http://plnkr.co/edit/SDOcGS?p=preview)**\r\n\r\n\r\n## Resources\r\n\r\n* [In-Depth Guide](https://github.com/angular-ui/ui-router/wiki)\r\n* [API Quick Reference](https://github.com/angular-ui/ui-router/wiki/Quick-Reference)\r\n* [Sample App](http://angular-ui.github.com/ui-router/sample/) ([Source](https://github.com/angular-ui/ui-router/tree/master/sample))\r\n* [FAQ](https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions)\r\n* [Introduction Video](http://egghead.io/lessons/angularjs-introduction-ui-router)\r\n* [Slides from CincyNg Meetup](http://slid.es/timkindberg/ui-router#/)\r\n\r\n## Report an Issue\r\n\r\nHelp us make UI-Router better! If you think you might have found a bug, or some other weirdness, start by making sure\r\nit hasn't already been reported. You can [search through existing issues](https://github.com/angular-ui/ui-router/search?q=wat%3F&type=Issues)\r\nto see if someone's reported one similar to yours.\r\n\r\nIf not, then [create a plunkr](http://plnkr.co/edit/u18KQc?p=preview) that demonstrates the problem (try to use as little code\r\nas possible: the more minimalist, the faster we can debug it).\r\n\r\nNext, [create a new issue](https://github.com/angular-ui/ui-router/issues/new) that briefly explains the problem,\r\nand provides a bit of background as to the circumstances that triggered it. Don't forget to include the link to\r\nthat plunkr you created!\r\n\r\n**Note**: If you're unsure how a feature is used, or are encountering some unexpected behavior that you aren't sure\r\nis a bug, it's best to talk it out in the\r\n[Google Group](https://groups.google.com/forum/#!categories/angular-ui/router) or on\r\n[StackOverflow](http://stackoverflow.com/questions/ask?tags=angularjs,angular-ui-router) before reporting it. This\r\nkeeps development streamlined, and helps us focus on building great software.\r\n\r\nPlease keep in mind that the issue tracker is for *issues*. Please do *not* post an issue if you need help or support. Instead, see one of the above-mentioned forums or [IRC](irc://irc.freenode.net/#angularjs).\r\n\r\n\r\n## Contribute\r\n\r\n**(1)** See the **[Developing](#developing)** section below, to get the development version of UI-Router up and running on your local machine.\r\n\r\n**(2)** Check out the [roadmap](https://github.com/angular-ui/ui-router/issues/milestones) to see where the project is headed, and if your feature idea fits with where we're headed.\r\n\r\n**(3)** If you're not sure, [open an RFC](https://github.com/angular-ui/ui-router/issues/new?title=RFC:%20My%20idea) to get some feedback on your idea.\r\n\r\n**(4)** Finally, commit some code and open a pull request. Code & commits should abide by the following rules:\r\n\r\n- *Always* have test coverage for new features (or regression tests for bug fixes), and *never* break existing tests\r\n- Commits should represent one logical change each; if a feature goes through multiple iterations, squash your commits down to one\r\n- Make sure to follow the [Angular commit message format](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format) so your change will appear in the changelog of the next release.\r\n- Changes should always respect the coding style of the project\r\n\r\n\r\n\r\n## Developing\r\n\r\nUI-Router uses <code>grunt >= 0.4.x</code>. Make sure to upgrade your environment and read the\r\n[Migration Guide](http://gruntjs.com/upgrading-from-0.3-to-0.4).\r\n\r\nDependencies for building from source and running tests:\r\n\r\n* [grunt-cli](https://github.com/gruntjs/grunt-cli) - run: `$ npm install -g grunt-cli`\r\n* Then, install the development dependencies by running `$ npm install` from the project directory\r\n\r\nThere are a number of targets in the gruntfile that are used to generating different builds:\r\n\r\n* `grunt`: Perform a normal build, runs jshint and karma tests\r\n* `grunt build`: Perform a normal build\r\n* `grunt dist`: Perform a clean build and generate documentation\r\n* `grunt dev`: Run dev server (sample app) and watch for changes, builds and runs karma tests on changes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}